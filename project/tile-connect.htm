<!DOCTYPE html>
<!-- saved from url=(0014)about:internet -->
<html lang="en-AU"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta name="robots" content="max-image-preview:large">
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	<link rel="dns-prefetch" href="http://cdnjs.cloudflare.com/">
<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/","svgExt":".svg","source":{"wpemoji":"http:\/\/localhost\/samuelPortfolioProj\/wp-includes\/js\/wp-emoji.js?ver=6.7.2","twemoji":"http:\/\/localhost\/samuelPortfolioProj\/wp-includes\/js\/twemoji.js?ver=6.7.2"}};
/**
 * @output wp-includes/js/wp-emoji-loader.js
 */

/**
 * Emoji Settings as exported in PHP via _print_emoji_detection_script().
 * @typedef WPEmojiSettings
 * @type {object}
 * @property {?object} source
 * @property {?string} source.concatemoji
 * @property {?string} source.twemoji
 * @property {?string} source.wpemoji
 * @property {?boolean} DOMReady
 * @property {?Function} readyCallback
 */

/**
 * Support tests.
 * @typedef SupportTests
 * @type {object}
 * @property {?boolean} flag
 * @property {?boolean} emoji
 */

/**
 * IIFE to detect emoji support and load Twemoji if needed.
 *
 * @param {Window} window
 * @param {Document} document
 * @param {WPEmojiSettings} settings
 */
( function wpEmojiLoader( window, document, settings ) {
	if ( typeof Promise === 'undefined' ) {
		return;
	}

	var sessionStorageKey = 'wpEmojiSettingsSupports';
	var tests = [ 'flag', 'emoji' ];

	/**
	 * Checks whether the browser supports offloading to a Worker.
	 *
	 * @since 6.3.0
	 *
	 * @private
	 *
	 * @returns {boolean}
	 */
	function supportsWorkerOffloading() {
		return (
			typeof Worker !== 'undefined' &&
			typeof OffscreenCanvas !== 'undefined' &&
			typeof URL !== 'undefined' &&
			URL.createObjectURL &&
			typeof Blob !== 'undefined'
		);
	}

	/**
	 * @typedef SessionSupportTests
	 * @type {object}
	 * @property {number} timestamp
	 * @property {SupportTests} supportTests
	 */

	/**
	 * Get support tests from session.
	 *
	 * @since 6.3.0
	 *
	 * @private
	 *
	 * @returns {?SupportTests} Support tests, or null if not set or older than 1 week.
	 */
	function getSessionSupportTests() {
		try {
			/** @type {SessionSupportTests} */
			var item = JSON.parse(
				sessionStorage.getItem( sessionStorageKey )
			);
			if (
				typeof item === 'object' &&
				typeof item.timestamp === 'number' &&
				new Date().valueOf() < item.timestamp + 604800 && // Note: Number is a week in seconds.
				typeof item.supportTests === 'object'
			) {
				return item.supportTests;
			}
		} catch ( e ) {}
		return null;
	}

	/**
	 * Persist the supports in session storage.
	 *
	 * @since 6.3.0
	 *
	 * @private
	 *
	 * @param {SupportTests} supportTests Support tests.
	 */
	function setSessionSupportTests( supportTests ) {
		try {
			/** @type {SessionSupportTests} */
			var item = {
				supportTests: supportTests,
				timestamp: new Date().valueOf()
			};

			sessionStorage.setItem(
				sessionStorageKey,
				JSON.stringify( item )
			);
		} catch ( e ) {}
	}

	/**
	 * Checks if two sets of Emoji characters render the same visually.
	 *
	 * This function may be serialized to run in a Worker. Therefore, it cannot refer to variables from the containing
	 * scope. Everything must be passed by parameters.
	 *
	 * @since 4.9.0
	 *
	 * @private
	 *
	 * @param {CanvasRenderingContext2D} context 2D Context.
	 * @param {string} set1 Set of Emoji to test.
	 * @param {string} set2 Set of Emoji to test.
	 *
	 * @return {boolean} True if the two sets render the same.
	 */
	function emojiSetsRenderIdentically( context, set1, set2 ) {
		// Cleanup from previous test.
		context.clearRect( 0, 0, context.canvas.width, context.canvas.height );
		context.fillText( set1, 0, 0 );
		var rendered1 = new Uint32Array(
			context.getImageData(
				0,
				0,
				context.canvas.width,
				context.canvas.height
			).data
		);

		// Cleanup from previous test.
		context.clearRect( 0, 0, context.canvas.width, context.canvas.height );
		context.fillText( set2, 0, 0 );
		var rendered2 = new Uint32Array(
			context.getImageData(
				0,
				0,
				context.canvas.width,
				context.canvas.height
			).data
		);

		return rendered1.every( function ( rendered2Data, index ) {
			return rendered2Data === rendered2[ index ];
		} );
	}

	/**
	 * Determines if the browser properly renders Emoji that Twemoji can supplement.
	 *
	 * This function may be serialized to run in a Worker. Therefore, it cannot refer to variables from the containing
	 * scope. Everything must be passed by parameters.
	 *
	 * @since 4.2.0
	 *
	 * @private
	 *
	 * @param {CanvasRenderingContext2D} context 2D Context.
	 * @param {string} type Whether to test for support of "flag" or "emoji".
	 * @param {Function} emojiSetsRenderIdentically Reference to emojiSetsRenderIdentically function, needed due to minification.
	 *
	 * @return {boolean} True if the browser can render emoji, false if it cannot.
	 */
	function browserSupportsEmoji( context, type, emojiSetsRenderIdentically ) {
		var isIdentical;

		switch ( type ) {
			case 'flag':
				/*
				 * Test for Transgender flag compatibility. Added in Unicode 13.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly (white flag emoji + transgender symbol).
				 */
				isIdentical = emojiSetsRenderIdentically(
					context,
					'\uD83C\uDFF3\uFE0F\u200D\u26A7\uFE0F', // as a zero-width joiner sequence
					'\uD83C\uDFF3\uFE0F\u200B\u26A7\uFE0F' // separated by a zero-width space
				);

				if ( isIdentical ) {
					return false;
				}

				/*
				 * Test for UN flag compatibility. This is the least supported of the letter locale flags,
				 * so gives us an easy test for full support.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly ([U] + [N]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					context,
					'\uD83C\uDDFA\uD83C\uDDF3', // as the sequence of two code points
					'\uD83C\uDDFA\u200B\uD83C\uDDF3' // as the two code points separated by a zero-width space
				);

				if ( isIdentical ) {
					return false;
				}

				/*
				 * Test for English flag compatibility. England is a country in the United Kingdom, it
				 * does not have a two letter locale code but rather a five letter sub-division code.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly (black flag emoji + [G] + [B] + [E] + [N] + [G]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					context,
					// as the flag sequence
					'\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67\uDB40\uDC7F',
					// with each code point separated by a zero-width space
					'\uD83C\uDFF4\u200B\uDB40\uDC67\u200B\uDB40\uDC62\u200B\uDB40\uDC65\u200B\uDB40\uDC6E\u200B\uDB40\uDC67\u200B\uDB40\uDC7F'
				);

				return ! isIdentical;
			case 'emoji':
				/*
				 * Four and twenty blackbirds baked in a pie.
				 *
				 * To test for Emoji 15.0 support, try to render a new emoji: Blackbird.
				 *
				 * The Blackbird is a ZWJ sequence combining 🐦 Bird and ⬛ large black square.,
				 *
				 * 0x1F426 (\uD83D\uDC26) == Bird
				 * 0x200D == Zero-Width Joiner (ZWJ) that links the code points for the new emoji or
				 * 0x200B == Zero-Width Space (ZWS) that is rendered for clients not supporting the new emoji.
				 * 0x2B1B == Large Black Square
				 *
				 * When updating this test for future Emoji releases, ensure that individual emoji that make up the
				 * sequence come from older emoji standards.
				 */
				isIdentical = emojiSetsRenderIdentically(
					context,
					'\uD83D\uDC26\u200D\u2B1B', // as the zero-width joiner sequence
					'\uD83D\uDC26\u200B\u2B1B' // separated by a zero-width space
				);

				return ! isIdentical;
		}

		return false;
	}

	/**
	 * Checks emoji support tests.
	 *
	 * This function may be serialized to run in a Worker. Therefore, it cannot refer to variables from the containing
	 * scope. Everything must be passed by parameters.
	 *
	 * @since 6.3.0
	 *
	 * @private
	 *
	 * @param {string[]} tests Tests.
	 * @param {Function} browserSupportsEmoji Reference to browserSupportsEmoji function, needed due to minification.
	 * @param {Function} emojiSetsRenderIdentically Reference to emojiSetsRenderIdentically function, needed due to minification.
	 *
	 * @return {SupportTests} Support tests.
	 */
	function testEmojiSupports( tests, browserSupportsEmoji, emojiSetsRenderIdentically ) {
		var canvas;
		if (
			typeof WorkerGlobalScope !== 'undefined' &&
			self instanceof WorkerGlobalScope
		) {
			canvas = new OffscreenCanvas( 300, 150 ); // Dimensions are default for HTMLCanvasElement.
		} else {
			canvas = document.createElement( 'canvas' );
		}

		var context = canvas.getContext( '2d', { willReadFrequently: true } );

		/*
		 * Chrome on OS X added native emoji rendering in M41. Unfortunately,
		 * it doesn't work when the font is bolder than 500 weight. So, we
		 * check for bold rendering support to avoid invisible emoji in Chrome.
		 */
		context.textBaseline = 'top';
		context.font = '600 32px Arial';

		var supports = {};
		tests.forEach( function ( test ) {
			supports[ test ] = browserSupportsEmoji( context, test, emojiSetsRenderIdentically );
		} );
		return supports;
	}

	/**
	 * Adds a script to the head of the document.
	 *
	 * @ignore
	 *
	 * @since 4.2.0
	 *
	 * @param {string} src The url where the script is located.
	 *
	 * @return {void}
	 */
	function addScript( src ) {
		var script = document.createElement( 'script' );
		script.src = src;
		script.defer = true;
		document.head.appendChild( script );
	}

	settings.supports = {
		everything: true,
		everythingExceptFlag: true
	};

	// Create a promise for DOMContentLoaded since the worker logic may finish after the event has fired.
	var domReadyPromise = new Promise( function ( resolve ) {
		document.addEventListener( 'DOMContentLoaded', resolve, {
			once: true
		} );
	} );

	// Obtain the emoji support from the browser, asynchronously when possible.
	new Promise( function ( resolve ) {
		var supportTests = getSessionSupportTests();
		if ( supportTests ) {
			resolve( supportTests );
			return;
		}

		if ( supportsWorkerOffloading() ) {
			try {
				// Note that the functions are being passed as arguments due to minification.
				var workerScript =
					'postMessage(' +
					testEmojiSupports.toString() +
					'(' +
					[
						JSON.stringify( tests ),
						browserSupportsEmoji.toString(),
						emojiSetsRenderIdentically.toString()
					].join( ',' ) +
					'));';
				var blob = new Blob( [ workerScript ], {
					type: 'text/javascript'
				} );
				var worker = new Worker( URL.createObjectURL( blob ), { name: 'wpTestEmojiSupports' } );
				worker.onmessage = function ( event ) {
					supportTests = event.data;
					setSessionSupportTests( supportTests );
					worker.terminate();
					resolve( supportTests );
				};
				return;
			} catch ( e ) {}
		}

		supportTests = testEmojiSupports( tests, browserSupportsEmoji, emojiSetsRenderIdentically );
		setSessionSupportTests( supportTests );
		resolve( supportTests );
	} )
		// Once the browser emoji support has been obtained from the session, finalize the settings.
		.then( function ( supportTests ) {
			/*
			 * Tests the browser support for flag emojis and other emojis, and adjusts the
			 * support settings accordingly.
			 */
			for ( var test in supportTests ) {
				settings.supports[ test ] = supportTests[ test ];

				settings.supports.everything =
					settings.supports.everything && settings.supports[ test ];

				if ( 'flag' !== test ) {
					settings.supports.everythingExceptFlag =
						settings.supports.everythingExceptFlag &&
						settings.supports[ test ];
				}
			}

			settings.supports.everythingExceptFlag =
				settings.supports.everythingExceptFlag &&
				! settings.supports.flag;

			// Sets DOMReady to false and assigns a ready function to settings.
			settings.DOMReady = false;
			settings.readyCallback = function () {
				settings.DOMReady = true;
			};
		} )
		.then( function () {
			return domReadyPromise;
		} )
		.then( function () {
			// When the browser can not render everything we need to load a polyfill.
			if ( ! settings.supports.everything ) {
				settings.readyCallback();

				var src = settings.source || {};

				if ( src.concatemoji ) {
					addScript( src.concatemoji );
				} else if ( src.wpemoji && src.twemoji ) {
					addScript( src.twemoji );
					addScript( src.wpemoji );
				}
			}
		} );
} )( window, document, window._wpemojiSettings );

/* ]]> */
</script>
<style id="wp-emoji-styles-inline-css" type="text/css">

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel="stylesheet" id="wp-block-library-css" href="./tile-connect_files/style.css" type="text/css" media="all">
<style id="classic-theme-styles-inline-css" type="text/css">
/**
 * These rules are needed for backwards compatibility.
 * They should match the button element rules in the base theme.json file.
 */
.wp-block-button__link {
	color: #ffffff;
	background-color: #32373c;
	border-radius: 9999px; /* 100% causes an oval, but any explicit but really high value retains the pill shape. */

	/* This needs a low specificity so it won't override the rules from the button element if defined in theme.json. */
	box-shadow: none;
	text-decoration: none;

	/* The extra 2px are added to size solids the same as the outline versions.*/
	padding: calc(0.667em + 2px) calc(1.333em + 2px);

	font-size: 1.125em;
}

.wp-block-file__button {
	background: #32373c;
	color: #ffffff;
	text-decoration: none;
}

</style>
<style id="global-styles-inline-css" type="text/css">
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel="stylesheet" id="header-style-css" href="./tile-connect_files/header.css" type="text/css" media="all">
<link rel="stylesheet" id="collapse-css-css" href="./tile-connect_files/collapse.css" type="text/css" media="all">
<link rel="stylesheet" id="project-desktop-style-css" href="./tile-connect_files/single-project-desktop.css" type="text/css" media="all">
<link rel="stylesheet" id="portfolio-mobile-style-css" href="./tile-connect_files/page-portfolio.css" type="text/css" media="all">
<link rel="stylesheet" id="samueng-style-css" href="./tile-connect_files/style(1).css" type="text/css" media="all">
<link rel="stylesheet" id="page-contact-style-css" href="./tile-connect_files/page-contact.css" type="text/css" media="all">
<link rel="stylesheet" id="highlight-js-dark-theme-css" href="./tile-connect_files/atom-one-dark.min.css" type="text/css" media="all">
<link rel="stylesheet" id="font-awesome-css" href="./tile-connect_files/all.min.css" type="text/css" media="all">
<link rel="https://api.w.org/" href="wp-json/"><link rel="alternate" title="JSON" type="application/json" href="wp-json/wp/v2/project/260"><link rel="EditURI" type="application/rsd+xml" title="RSD" href="xmlrpc.php?rsd">
<meta name="generator" content="WordPress 6.7.2">
<link rel="canonical" href="project/tile-connect/">
<link rel="shortlink" href="?p=260">
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="wp-json/oembed/1.0/embed?url=http%3A%2F%2Flocalhost%2FsamuelPortfolioProj%2Fproject%2Ftile-connect%2F">
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="wp-json/oembed/1.0/embed?url=http%3A%2F%2Flocalhost%2FsamuelPortfolioProj%2Fproject%2Ftile-connect%2F&amp;format=xml">
<meta name="cdp-version" content="1.4.9"><link rel="icon" href="./tile-connect_files/yellowcat_icon.jpg" sizes="32x32">
<link rel="icon" href="./tile-connect_files/yellowcat_icon.jpg" sizes="192x192">
<link rel="apple-touch-icon" href="./tile-connect_files/yellowcat_icon.jpg">
<meta name="msapplication-TileImage" content="wp-content/uploads/2025/03/yellowcat_icon.jpg">
<script src="./tile-connect_files/twemoji.js.tải xuống" defer=""></script><script src="./tile-connect_files/wp-emoji.js.tải xuống" defer=""></script></head>


        <body><header class="custom-header samueng-header-container">

            <!-- Main Menu -->
            <nav class="main-menu main-menu-container">

                <div class="header-content site-content-group">

                    <!-- Website Logo -->
                    <div class="website-logo">
                        <img src="./tile-connect_files/yellowcat_icon.jpg" alt="Site Icon" width="150" height="150">
                    </div>
                    
                    <!-- Website Logo -->
                    <div class="website-name">
                        Samuel Nguyen                    </div>

                </div>

                <div class="menu-wrapper"><nav class="main-nav"><ul id="menu-mainmenu" class="menu"><li id="menu-item-351" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-351"><a href="">Home</a></li>
<li id="menu-item-39" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-39"><a href="portfolio/">Portfolio</a></li>
<li id="menu-item-186" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-186"><a href="contact/">Contact</a></li>
</ul></nav></div>            </nav>

            <!-- Banner -->
            <div class="header-banner">
                <!-- Page Title -->
                <div class="header-title">
                    Tile Connect                </div>

                <img src="./tile-connect_files/banner 2.png" alt="Banner">
            </div>



        </header>
        
<div class="single-project-mobile-body layout-body-center">
    <div id="content" data-kubio="kubio/root">
            </div>

    <h1 class="project-name">Tile Connect</h1>    
    <p class="project-start-date"><strong>Start:</strong> March 3, 2022</p>        <p class="project-platforms"><strong>Platforms:</strong> Android, IOS</p>
    <div class="project-layout">
        <div class="project-teaser-trailer">
            <div class="media-wrapper"><iframe title="Tile Connect" width="500" height="375" src="./tile-connect_files/pZ_rWn1RLt0.html" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe></div>        </div>

        <div class="project-info">
            <h3>Project Info</h3>

            <p><strong>Project Length:</strong> 4 Weeks</p>
            <p><strong>Project Type:</strong> Team - <strong> Size:</strong>1</p><p><strong>Work At:</strong> Mgif Studio</p>            <p><strong>Responsibilities:</strong> Full game develemopment.</p>
            <p><strong>Engine and tools:</strong> Unity</p>
            <p><strong>Languages:</strong> C#</p>
        </div>
    </div>


    <p></p>
    
    <div class="project-description-container">
        <div class="project-field-label">Description:</div>
        <span class="project-description">
            <p><strong>Game inspired by Tile Master.</strong></p>
<p class="" data-start="60" data-end="98">Select 3 matching tiles to score.</p>
<p><strong data-start="79" data-end="94">Game Rules:</strong></p>
<ul>
<li>You can select any highlighted tiles.</li>
<li>Selected tiles are added to the queue below.</li>
<li>If there are 3 matching tiles in the queue, they will be cleared and score points.</li>
<li>If the queue is full with 7 tiles and no matches are made, the game is over.</li>
</ul>
<p class="" data-start="90" data-end="113"><strong data-start="90" data-end="111">Features include:</strong></p>
<ul>
<li data-start="116" data-end="176"><strong data-start="116" data-end="129">Exchange:</strong> Shuffle the positions of tiles on the board.</li>
<li data-start="179" data-end="296"><strong data-start="179" data-end="188">Hint:</strong> Automatically clears a set of 3 matching tiles, prioritizing those that match tiles already in the queue.</li>
<li data-start="299" data-end="339"><strong data-start="299" data-end="310">Revert:</strong> Undo the most recent move.</li>
<li data-start="342" data-end="405"><strong data-start="342" data-end="359">Theme Switch:</strong> Change both the background and tile patterns.</li>
<li data-start="342" data-end="405"><strong data-start="49" data-end="62">Load Map:</strong> Load level data from a JSON file.</li>
</ul>
        </span>
    </div>

    <p></p>

    <div class="features-container"><span class="features-label project-field-label">What I Do:</span><div class="what-i-do"><ul>
<li data-start="110" data-end="214"><strong data-start="110" data-end="142">Level Design &amp; Data Handling</strong> – Designed levels, managed level data, and loaded maps from JSON files.</li>
<li data-start="216" data-end="312"><strong data-start="216" data-end="243">Unity Project Structure</strong> – Structured Unity project folders, organized resources and scripts.</li>
<li data-start="314" data-end="410"><strong data-start="314" data-end="343">Core Systems &amp; Game Logic</strong> – Implemented tile logic, scoring system, and win/lose conditions.</li>
<li data-start="412" data-end="493"><strong data-start="412" data-end="444">Tile Animation &amp; Interaction</strong> – Handled tile animations and user interactions.</li>
<li data-start="495" data-end="581"><strong data-start="495" data-end="513">Input Handling</strong> – Managed user input with precise click/tap detection and response.</li>
<li data-start="583" data-end="660"><strong data-start="583" data-end="595">Features</strong> – Developed supporting features like Exchange, Hint, and Revert.</li>
<li data-start="662" data-end="778"><strong data-start="662" data-end="690">Theme &amp; UI Customization</strong> – Customized UI elements and implemented theme switching (backgrounds and tile styles).</li>
</ul>
</div></div>    <div class="features-container"><span class="features-label project-field-label">What I Learn:</span><div class="what-i-learn"></div>        <div class="collapse-group">
            <div class="item-collapse-label">
                <div class="collapse-icons">
                    <span class="collapse-icon collapse-icon-up"></span>
                    <span class="collapse-icon collapse-icon-down"></span>
                </div>
                File Structure Management            </div>
            <div class="item-collapse-details">
                <p></p><h3>Description:</h3> <div>
  <h3>Compared to my previous project (Dragon Adventure), I paid more attention to project structure from the beginning this time.</h3>
  <p>
    In the past, I didn't focus much on organizing project assets. Resources were mostly categorized by object type,
    but sometimes I over-divided folders or mixed different kinds of assets together — including shared ones.
    This led to difficulties in asset management, reuse, and future scalability.
  </p>

  <h3>For this current project, which is small in scope and not yet divided into multiple modules, I chose to organize the folder structure by asset types: scripts, scenes, animations, prefabs, sprites, etc.</h3>
  <p>
    This approach allows me to quickly look up and update specific types of assets, which is especially helpful when working solo
    and aiming for fast iteration without the overhead of a feature-based structure. Grouping assets by type also helps with
    batch operations such as renaming, reimporting, or filtering in the Project window.
  </p>

  <h3>For dynamic assets loaded at runtime, such as themes, tile sprites, and level data, I place them under the <code>Resources</code> folder.</h3>
  <p>
    This makes it easy to use <code>Resources.Load()</code> without the complexity of configuring Addressables. Since the current focus is on
    delivering a functional demo rather than optimizing bundle size or modular builds, using <code>Resources/</code> accelerates the
    development process. That said, I'm careful to limit the use of <code>Resources</code> only to assets that genuinely require runtime loading,
    to keep things scalable in the future.
  </p>
</div>
<img src="./tile-connect_files/tileconnect_folder_theme.png" class="image-align-top">
<p></p>            </div>
        </div>
                <div class="collapse-group">
            <div class="item-collapse-label">
                <div class="collapse-icons">
                    <span class="collapse-icon collapse-icon-up"></span>
                    <span class="collapse-icon collapse-icon-down"></span>
                </div>
                Dynamic Map Loader            </div>
            <div class="item-collapse-details">
                <p></p><h3>Description:</h3> <p>I use a JSON file to define the layout for each level. A sample map data looks like this:</p>

<pre><code class="hljs language-bash">{
  <span class="hljs-string">"id"</span>: 1,
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"Level1"</span>,
  <span class="hljs-string">"limitedTime"</span>: 216,
  <span class="hljs-string">"range"</span>: { <span class="hljs-string">"x"</span>: <span class="hljs-string">"0f"</span>, <span class="hljs-string">"y"</span>: <span class="hljs-string">"5f"</span> },
  <span class="hljs-string">"layers"</span>: [
    {
      <span class="hljs-string">"id"</span>: 1,
      <span class="hljs-string">"name"</span>: <span class="hljs-string">"Layer1"</span>,
      <span class="hljs-string">"rows"</span>: [
        { <span class="hljs-string">"cells"</span>: [<span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>] },
        { <span class="hljs-string">"cells"</span>: [<span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>] },
        { <span class="hljs-string">"cells"</span>: [<span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>] }
        ...
      ]
    },
    {
      <span class="hljs-string">"id"</span>: 2,
      <span class="hljs-string">"name"</span>: <span class="hljs-string">"Layer2"</span>,
      <span class="hljs-string">"rows"</span>: [
        { <span class="hljs-string">"cells"</span>: [<span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>] },
        { <span class="hljs-string">"cells"</span>: [<span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>] }
        ...
      ]
    }
  ]
}
</code></pre>

<p>
  In this structure:
  </p><ul>
    <li><code>true</code> means the cell has a tile.</li>
    <li><code>false</code> means the cell is empty (no tile).</li>
    <li>Each layer represents a different visual or functional tile group (e.g., ground, decoration, object).</li>
  </ul>
<p></p>

<p>
  I developed a <strong>tile auto-generation algorithm</strong> that builds the level dynamically at runtime based on this JSON.
  The system works as follows:
  </p><ol>
    <li>Load the corresponding map file.</li>
    <li>Iterate through each layer and its rows.</li>
    <li>For every cell marked as <code>true</code>, the system places a tile from a predefined tile set, either randomly or using specific logic.</li>
  </ol>
<p></p>

<h3>Advantages</h3>
<ul>
  <li><strong>No repeated experience:</strong> Since tiles are dynamically and randomly generated, each playthrough of the same level layout feels fresh.</li>
  <li><strong>Asset optimization:</strong> Reduces the need to manually design and store multiple static tilemaps.</li>
</ul>

<h3>Limitation</h3>
<ul>
  <li>This method is not suitable when players want to <strong>replay the exact same version</strong> of a level, as the tile arrangement changes each time.</li>
</ul>

<h2>Suggested Improvements</h2>

<p>To address the limitation above, I plan to improve the system with the following changes:</p>

<ul>
  <li><strong>Add fixed tile IDs per cell</strong> in the JSON:
    <pre><code class="hljs language-json"><span class="hljs-punctuation">{</span> <span class="hljs-attr">"cells"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">}</span></code></pre>
    <ul>
      <li><code>0</code> means no tile.</li>
      <li>Other numbers represent specific tile IDs from the tileset.</li>
    </ul>
    <p>This allows for <strong>accurate level reconstruction</strong> for replaying, saving/loading progress, or designing handcrafted challenges.</p>
  </li>

  <li><strong>Develop an Editor Tool – Level Generator:</strong>
    <ul>
      <li>Allows manual or semi-automated creation of JSON level files from within Unity Editor.</li>
      <li>Lets you assign tiles directly to cells visually and export clean JSON files.</li>
      <li>Useful for hybrid levels combining both static and dynamic elements.</li>
    </ul>
  </li>
</ul>
<p></p>            </div>
        </div>
        </div>    
</div>



<hr>
<div id="footer" role="contentinfo">
<!-- If you'd like to support WordPress, having the "powered by" link somewhere on your blog is the best way; it's our only promotion or advertising. -->
	<p>
		Samuel Nguyen is proudly powered by <a href="https://wordpress.org/">WordPress</a>	</p>
</div>


<!-- Gorgeous design by Michael Heilemann - http://binarybonsai.com/ -->

		<style id="core-block-supports-inline-css" type="text/css">
/**
 * Core styles: block-supports
 */

</style>
<script type="text/javascript" src="./tile-connect_files/collapse.js.tải xuống" id="collapse-js-js"></script>
<script type="text/javascript" src="./tile-connect_files/highlight.min.js.tải xuống" id="highlight-js-js"></script>
<script type="text/javascript" id="highlight-js-js-after">
/* <![CDATA[ */
hljs.highlightAll();
/* ]]> */
</script>



</body></html>